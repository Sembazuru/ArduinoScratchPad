
C:\Users\CDELLI~1\AppData\Local\Temp\build-933dc11e-0243-44f7-b2f6-eb75db8f2038/ProgmemCstrings.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000f44  00000fd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b3  00800110  00800110  00000fe8  2**0
                  ALLOC
  3 .debug_aranges 00000538  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000c18  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006679  00000000  00000000  00002138  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ed2  00000000  00000000  000087b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002d33  00000000  00000000  00009683  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000990  00000000  00000000  0000c3b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000177d  00000000  00000000  0000cd48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003847  00000000  00000000  0000e4c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000518  00000000  00000000  00011d0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
   0:	0c 94 c0 01 	jmp	0x380	; 0x380 <__ctors_end>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
   4:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
   8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
   c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  38:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  40:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__vector_16>
  44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  48:	0c 94 c8 03 	jmp	0x790	; 0x790 <__vector_18>
  4c:	0c 94 16 04 	jmp	0x82c	; 0x82c <__vector_19>
  50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>

00000068 <string_table>:
  68:	a9 01 03 02 5e 02 bc 02 cf 02                       ....^.....

00000072 <_ZZ4loopE3__c_0>:
  72:	20 2a 2a 20 54 68 65 20 61 6d 6f 75 6e 74 20 6f      ** The amount o
  82:	66 20 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 74     f microseconds t
  92:	6f 20 66 65 74 63 68 20 61 6e 64 20 64 69 73 70     o fetch and disp
  a2:	6c 61 79 20 74 68 65 20 73 74 72 69 6e 67 73 20     lay the strings 
  b2:	66 72 6f 6d 20 50 52 4f 47 4d 45 4d 20 75 73 69     from PROGMEM usi
  c2:	6e 67 20 6d 79 20 62 79 74 65 2d 62 79 2d 62 79     ng my byte-by-by
  d2:	74 65 20 6d 65 74 68 6f 64 20 69 73 3a 20 00        te method is: .

000000e1 <_ZZ4loopE3__c>:
  e1:	20 2a 2a 20 54 68 65 20 61 6d 6f 75 6e 74 20 6f      ** The amount o
  f1:	66 20 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 74     f microseconds t
 101:	6f 20 66 65 74 63 68 20 61 6e 64 20 64 69 73 70     o fetch and disp
 111:	6c 61 79 20 74 68 65 20 73 74 72 69 6e 67 73 20     lay the strings 
 121:	66 72 6f 6d 20 50 52 4f 47 4d 45 4d 20 75 73 69     from PROGMEM usi
 131:	6e 67 20 74 68 65 20 73 75 67 67 65 73 74 65 64     ng the suggested
 141:	20 73 74 72 63 70 79 5f 50 20 6d 65 74 68 6f 64      strcpy_P method
 151:	20 69 73 3a 20 00                                    is: .

00000157 <_ZZ5setupE3__c>:
 157:	20 2a 2a 2a 2a 2a 20 49 6e 73 74 72 75 63 74 69      ***** Instructi
 167:	6f 6e 73 20 66 6f 72 20 75 73 69 6e 67 20 74 68     ons for using th
 177:	65 20 48 6f 6c 79 20 48 61 6e 64 20 47 72 65 6e     e Holy Hand Gren
 187:	61 64 65 20 6f 66 20 41 6e 74 69 6f 63 68 2c 20     ade of Antioch, 
 197:	73 74 6f 72 65 64 20 69 6e 20 50 52 4f 47 4d 45     stored in PROGME
 1a7:	4d 00                                               M.

000001a9 <_ZL8string_1>:
 1a9:	46 69 72 73 74 20 73 68 61 6c 74 20 74 68 6f 75     First shalt thou
 1b9:	20 74 61 6b 65 20 6f 75 74 20 74 68 65 20 48 6f      take out the Ho
 1c9:	6c 79 20 50 69 6e 2c 20 74 68 65 6e 20 73 68 61     ly Pin, then sha
 1d9:	6c 74 20 74 68 6f 75 20 63 6f 75 6e 74 20 74 6f     lt thou count to
 1e9:	20 74 68 72 65 65 2c 20 6e 6f 20 6d 6f 72 65 2c      three, no more,
 1f9:	20 6e 6f 20 6c 65 73 73 2e 00                        no less..

00000203 <_ZL8string_2>:
 203:	54 68 72 65 65 20 73 68 61 6c 6c 20 62 65 20 74     Three shall be t
 213:	68 65 20 6e 75 6d 62 65 72 20 74 68 6f 75 20 73     he number thou s
 223:	68 61 6c 74 20 63 6f 75 6e 74 2c 20 61 6e 64 20     halt count, and 
 233:	74 68 65 20 6e 75 6d 62 65 72 20 6f 66 20 74 68     the number of th
 243:	65 20 63 6f 75 6e 74 69 6e 67 20 73 68 61 6c 6c     e counting shall
 253:	20 62 65 20 74 68 72 65 65 2e 00                     be three..

0000025e <_ZL8string_3>:
 25e:	46 6f 75 72 20 73 68 61 6c 74 20 74 68 6f 75 20     Four shalt thou 
 26e:	6e 6f 74 20 63 6f 75 6e 74 2c 20 6e 65 69 74 68     not count, neith
 27e:	65 72 20 63 6f 75 6e 74 20 74 68 6f 75 20 74 77     er count thou tw
 28e:	6f 2c 20 65 78 63 65 70 74 69 6e 67 20 74 68 61     o, excepting tha
 29e:	74 20 74 68 6f 75 20 74 68 65 6e 20 70 72 6f 63     t thou then proc
 2ae:	65 65 64 20 74 6f 20 74 68 72 65 65 2e 00           eed to three..

000002bc <_ZL8string_4>:
 2bc:	46 69 76 65 20 69 73 20 72 69 67 68 74 20 6f 75     Five is right ou
 2cc:	74 2e 00                                            t..

000002cf <_ZL8string_5>:
 2cf:	4f 6e 63 65 20 74 68 65 20 6e 75 6d 62 65 72 20     Once the number 
 2df:	74 68 72 65 65 2c 20 62 65 69 6e 67 20 74 68 65     three, being the
 2ef:	20 74 68 69 72 64 20 6e 75 6d 62 65 72 2c 20 62      third number, b
 2ff:	65 20 72 65 61 63 68 65 64 2c 20 74 68 65 6e 20     e reached, then 
 30f:	6c 6f 62 62 65 73 74 20 74 68 6f 75 20 74 68 79     lobbest thou thy
 31f:	20 48 6f 6c 79 20 48 61 6e 64 20 47 72 65 6e 61      Holy Hand Grena
 32f:	64 65 20 6f 66 20 41 6e 74 69 6f 63 68 20 74 6f     de of Antioch to
 33f:	77 61 72 64 73 20 74 68 79 20 66 6f 65 2c 20 77     wards thy foe, w
 34f:	68 6f 20 62 65 69 6e 67 20 6e 61 75 67 68 74 79     ho being naughty
 35f:	20 69 6e 20 4d 79 20 73 69 67 68 74 2c 20 73 68      in My sight, sh
 36f:	61 6c 6c 20 73 6e 75 66 66 20 69 74 2e 00 00        all snuff it...

0000037e <__ctors_start>:
 37e:	84 05       	cpc	r24, r4

00000380 <__ctors_end>:
 380:	11 24       	eor	r1, r1
 382:	1f be       	out	0x3f, r1	; 63
 384:	cf ef       	ldi	r28, 0xFF	; 255
 386:	d8 e0       	ldi	r29, 0x08	; 8
 388:	de bf       	out	0x3e, r29	; 62
 38a:	cd bf       	out	0x3d, r28	; 61

0000038c <__do_copy_data>:
 38c:	11 e0       	ldi	r17, 0x01	; 1
 38e:	a0 e0       	ldi	r26, 0x00	; 0
 390:	b1 e0       	ldi	r27, 0x01	; 1
 392:	e4 e4       	ldi	r30, 0x44	; 68
 394:	ff e0       	ldi	r31, 0x0F	; 15
 396:	02 c0       	rjmp	.+4      	; 0x39c <.do_copy_data_start>

00000398 <.do_copy_data_loop>:
 398:	05 90       	lpm	r0, Z+
 39a:	0d 92       	st	X+, r0

0000039c <.do_copy_data_start>:
 39c:	a0 31       	cpi	r26, 0x10	; 16
 39e:	b1 07       	cpc	r27, r17
 3a0:	d9 f7       	brne	.-10     	; 0x398 <.do_copy_data_loop>

000003a2 <__do_clear_bss>:
 3a2:	11 e0       	ldi	r17, 0x01	; 1
 3a4:	a0 e1       	ldi	r26, 0x10	; 16
 3a6:	b1 e0       	ldi	r27, 0x01	; 1
 3a8:	01 c0       	rjmp	.+2      	; 0x3ac <.do_clear_bss_start>

000003aa <.do_clear_bss_loop>:
 3aa:	1d 92       	st	X+, r1

000003ac <.do_clear_bss_start>:
 3ac:	a3 3c       	cpi	r26, 0xC3	; 195
 3ae:	b1 07       	cpc	r27, r17
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <.do_clear_bss_loop>

000003b2 <__do_global_ctors>:
 3b2:	13 e0       	ldi	r17, 0x03	; 3
 3b4:	c0 e8       	ldi	r28, 0x80	; 128
 3b6:	d3 e0       	ldi	r29, 0x03	; 3
 3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <.do_global_ctors_start>

000003ba <.do_global_ctors_loop>:
 3ba:	22 97       	sbiw	r28, 0x02	; 2
 3bc:	fe 01       	movw	r30, r28
 3be:	0e 94 9c 07 	call	0xf38	; 0xf38 <__tablejump__>

000003c2 <.do_global_ctors_start>:
 3c2:	ce 37       	cpi	r28, 0x7E	; 126
 3c4:	d1 07       	cpc	r29, r17
 3c6:	c9 f7       	brne	.-14     	; 0x3ba <.do_global_ctors_loop>
 3c8:	0e 94 da 05 	call	0xbb4	; 0xbb4 <main>
 3cc:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <_exit>

000003d0 <__bad_interrupt>:
 3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <strcpy_P>:
 3d4:	fb 01       	movw	r30, r22
 3d6:	dc 01       	movw	r26, r24
 3d8:	05 90       	lpm	r0, Z+
 3da:	0d 92       	st	X+, r0
 3dc:	00 20       	and	r0, r0
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <strcpy_P+0x4>
 3e0:	08 95       	ret

000003e2 <_Z26alternateStringReferencingv>:
 3e2:	ef 92       	push	r14
 3e4:	ff 92       	push	r15
 3e6:	0f 93       	push	r16
 3e8:	1f 93       	push	r17
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	00 e0       	ldi	r16, 0x00	; 0
 3f0:	10 e0       	ldi	r17, 0x00	; 0
 3f2:	f8 01       	movw	r30, r16
 3f4:	ee 0f       	add	r30, r30
 3f6:	ff 1f       	adc	r31, r31
 3f8:	e8 59       	subi	r30, 0x98	; 152
 3fa:	ff 4f       	sbci	r31, 0xFF	; 255
 3fc:	c0 e0       	ldi	r28, 0x00	; 0
 3fe:	d0 e0       	ldi	r29, 0x00	; 0
 400:	e5 90       	lpm	r14, Z+
 402:	f4 90       	lpm	r15, Z+
 404:	f7 01       	movw	r30, r14
 406:	ec 0f       	add	r30, r28
 408:	fd 1f       	adc	r31, r29
 40a:	64 91       	lpm	r22, Z+
 40c:	66 23       	and	r22, r22
 40e:	31 f0       	breq	.+12     	; 0x41c <_Z26alternateStringReferencingv+0x3a>
 410:	81 ea       	ldi	r24, 0xA1	; 161
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	0e 94 36 06 	call	0xc6c	; 0xc6c <_ZN5Print5printEc>
 418:	21 96       	adiw	r28, 0x01	; 1
 41a:	f4 cf       	rjmp	.-24     	; 0x404 <_Z26alternateStringReferencingv+0x22>
 41c:	81 ea       	ldi	r24, 0xA1	; 161
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	0e 94 3e 06 	call	0xc7c	; 0xc7c <_ZN5Print7printlnEv>
 424:	0f 5f       	subi	r16, 0xFF	; 255
 426:	1f 4f       	sbci	r17, 0xFF	; 255
 428:	05 30       	cpi	r16, 0x05	; 5
 42a:	11 05       	cpc	r17, r1
 42c:	11 f7       	brne	.-60     	; 0x3f2 <_Z26alternateStringReferencingv+0x10>
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	ff 90       	pop	r15
 438:	ef 90       	pop	r14
 43a:	08 95       	ret

0000043c <_Z28recommendedStringReferencingv>:
 43c:	ef 92       	push	r14
 43e:	ff 92       	push	r15
 440:	0f 93       	push	r16
 442:	1f 93       	push	r17
 444:	df 93       	push	r29
 446:	cf 93       	push	r28
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
 44c:	c8 5c       	subi	r28, 0xC8	; 200
 44e:	d0 40       	sbci	r29, 0x00	; 0
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	f8 94       	cli
 454:	de bf       	out	0x3e, r29	; 62
 456:	0f be       	out	0x3f, r0	; 63
 458:	cd bf       	out	0x3d, r28	; 61
 45a:	00 e0       	ldi	r16, 0x00	; 0
 45c:	10 e0       	ldi	r17, 0x00	; 0
 45e:	7e 01       	movw	r14, r28
 460:	08 94       	sec
 462:	e1 1c       	adc	r14, r1
 464:	f1 1c       	adc	r15, r1
 466:	f8 01       	movw	r30, r16
 468:	ee 0f       	add	r30, r30
 46a:	ff 1f       	adc	r31, r31
 46c:	e8 59       	subi	r30, 0x98	; 152
 46e:	ff 4f       	sbci	r31, 0xFF	; 255
 470:	65 91       	lpm	r22, Z+
 472:	74 91       	lpm	r23, Z+
 474:	c7 01       	movw	r24, r14
 476:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <strcpy_P>
 47a:	81 ea       	ldi	r24, 0xA1	; 161
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	b7 01       	movw	r22, r14
 480:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN5Print7printlnEPKc>
 484:	0f 5f       	subi	r16, 0xFF	; 255
 486:	1f 4f       	sbci	r17, 0xFF	; 255
 488:	05 30       	cpi	r16, 0x05	; 5
 48a:	11 05       	cpc	r17, r1
 48c:	61 f7       	brne	.-40     	; 0x466 <_Z28recommendedStringReferencingv+0x2a>
 48e:	c8 53       	subi	r28, 0x38	; 56
 490:	df 4f       	sbci	r29, 0xFF	; 255
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	f8 94       	cli
 496:	de bf       	out	0x3e, r29	; 62
 498:	0f be       	out	0x3f, r0	; 63
 49a:	cd bf       	out	0x3d, r28	; 61
 49c:	cf 91       	pop	r28
 49e:	df 91       	pop	r29
 4a0:	1f 91       	pop	r17
 4a2:	0f 91       	pop	r16
 4a4:	ff 90       	pop	r15
 4a6:	ef 90       	pop	r14
 4a8:	08 95       	ret

000004aa <loop>:
 4aa:	af 92       	push	r10
 4ac:	bf 92       	push	r11
 4ae:	cf 92       	push	r12
 4b0:	df 92       	push	r13
 4b2:	ef 92       	push	r14
 4b4:	ff 92       	push	r15
 4b6:	0f 93       	push	r16
 4b8:	1f 93       	push	r17
 4ba:	0e 94 0d 03 	call	0x61a	; 0x61a <micros>
 4be:	5b 01       	movw	r10, r22
 4c0:	6c 01       	movw	r12, r24
 4c2:	0e 94 1e 02 	call	0x43c	; 0x43c <_Z28recommendedStringReferencingv>
 4c6:	0e 94 0d 03 	call	0x61a	; 0x61a <micros>
 4ca:	7b 01       	movw	r14, r22
 4cc:	8c 01       	movw	r16, r24
 4ce:	81 ea       	ldi	r24, 0xA1	; 161
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	61 ee       	ldi	r22, 0xE1	; 225
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	0e 94 13 06 	call	0xc26	; 0xc26 <_ZN5Print5printEPK19__FlashStringHelper>
 4da:	ea 18       	sub	r14, r10
 4dc:	fb 08       	sbc	r15, r11
 4de:	0c 09       	sbc	r16, r12
 4e0:	1d 09       	sbc	r17, r13
 4e2:	81 ea       	ldi	r24, 0xA1	; 161
 4e4:	91 e0       	ldi	r25, 0x01	; 1
 4e6:	b8 01       	movw	r22, r16
 4e8:	a7 01       	movw	r20, r14
 4ea:	2a e0       	ldi	r18, 0x0A	; 10
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN5Print7printlnEli>
 4f2:	81 ea       	ldi	r24, 0xA1	; 161
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <_ZN5Print7printlnEv>
 4fa:	0e 94 0d 03 	call	0x61a	; 0x61a <micros>
 4fe:	5b 01       	movw	r10, r22
 500:	6c 01       	movw	r12, r24
 502:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_Z26alternateStringReferencingv>
 506:	0e 94 0d 03 	call	0x61a	; 0x61a <micros>
 50a:	7b 01       	movw	r14, r22
 50c:	8c 01       	movw	r16, r24
 50e:	81 ea       	ldi	r24, 0xA1	; 161
 510:	91 e0       	ldi	r25, 0x01	; 1
 512:	62 e7       	ldi	r22, 0x72	; 114
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	0e 94 13 06 	call	0xc26	; 0xc26 <_ZN5Print5printEPK19__FlashStringHelper>
 51a:	ea 18       	sub	r14, r10
 51c:	fb 08       	sbc	r15, r11
 51e:	0c 09       	sbc	r16, r12
 520:	1d 09       	sbc	r17, r13
 522:	81 ea       	ldi	r24, 0xA1	; 161
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	b8 01       	movw	r22, r16
 528:	a7 01       	movw	r20, r14
 52a:	2a e0       	ldi	r18, 0x0A	; 10
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN5Print7printlnEli>
 532:	81 ea       	ldi	r24, 0xA1	; 161
 534:	91 e0       	ldi	r25, 0x01	; 1
 536:	0e 94 3e 06 	call	0xc7c	; 0xc7c <_ZN5Print7printlnEv>
 53a:	ff cf       	rjmp	.-2      	; 0x53a <loop+0x90>

0000053c <setup>:
 53c:	81 ea       	ldi	r24, 0xA1	; 161
 53e:	91 e0       	ldi	r25, 0x01	; 1
 540:	40 e0       	ldi	r20, 0x00	; 0
 542:	52 ec       	ldi	r21, 0xC2	; 194
 544:	61 e0       	ldi	r22, 0x01	; 1
 546:	70 e0       	ldi	r23, 0x00	; 0
 548:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN14HardwareSerial5beginEm>
 54c:	81 ea       	ldi	r24, 0xA1	; 161
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	0e 94 82 05 	call	0xb04	; 0xb04 <_ZN14HardwareSerialcvbEv>
 554:	88 23       	and	r24, r24
 556:	d1 f3       	breq	.-12     	; 0x54c <setup+0x10>
 558:	68 ee       	ldi	r22, 0xE8	; 232
 55a:	73 e0       	ldi	r23, 0x03	; 3
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 33 03 	call	0x666	; 0x666 <delay>
 564:	81 ea       	ldi	r24, 0xA1	; 161
 566:	91 e0       	ldi	r25, 0x01	; 1
 568:	0e 94 3e 06 	call	0xc7c	; 0xc7c <_ZN5Print7printlnEv>
 56c:	81 ea       	ldi	r24, 0xA1	; 161
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	0e 94 3e 06 	call	0xc7c	; 0xc7c <_ZN5Print7printlnEv>
 574:	81 ea       	ldi	r24, 0xA1	; 161
 576:	91 e0       	ldi	r25, 0x01	; 1
 578:	67 e5       	ldi	r22, 0x57	; 87
 57a:	71 e0       	ldi	r23, 0x01	; 1
 57c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN5Print7printlnEPK19__FlashStringHelper>
 580:	81 ea       	ldi	r24, 0xA1	; 161
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	0e 94 3e 06 	call	0xc7c	; 0xc7c <_ZN5Print7printlnEv>
 588:	08 95       	ret

0000058a <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 58a:	1f 92       	push	r1
 58c:	0f 92       	push	r0
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	0f 92       	push	r0
 592:	11 24       	eor	r1, r1
 594:	2f 93       	push	r18
 596:	3f 93       	push	r19
 598:	8f 93       	push	r24
 59a:	9f 93       	push	r25
 59c:	af 93       	push	r26
 59e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 5a0:	80 91 14 01 	lds	r24, 0x0114
 5a4:	90 91 15 01 	lds	r25, 0x0115
 5a8:	a0 91 16 01 	lds	r26, 0x0116
 5ac:	b0 91 17 01 	lds	r27, 0x0117
	unsigned char f = timer0_fract;
 5b0:	30 91 18 01 	lds	r19, 0x0118

	m += MILLIS_INC;
 5b4:	01 96       	adiw	r24, 0x01	; 1
 5b6:	a1 1d       	adc	r26, r1
 5b8:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
 5ba:	23 2f       	mov	r18, r19
 5bc:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
 5be:	2d 37       	cpi	r18, 0x7D	; 125
 5c0:	20 f0       	brcs	.+8      	; 0x5ca <__vector_16+0x40>
		f -= FRACT_MAX;
 5c2:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
 5c4:	01 96       	adiw	r24, 0x01	; 1
 5c6:	a1 1d       	adc	r26, r1
 5c8:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 5ca:	20 93 18 01 	sts	0x0118, r18
	timer0_millis = m;
 5ce:	80 93 14 01 	sts	0x0114, r24
 5d2:	90 93 15 01 	sts	0x0115, r25
 5d6:	a0 93 16 01 	sts	0x0116, r26
 5da:	b0 93 17 01 	sts	0x0117, r27
	timer0_overflow_count++;
 5de:	80 91 10 01 	lds	r24, 0x0110
 5e2:	90 91 11 01 	lds	r25, 0x0111
 5e6:	a0 91 12 01 	lds	r26, 0x0112
 5ea:	b0 91 13 01 	lds	r27, 0x0113
 5ee:	01 96       	adiw	r24, 0x01	; 1
 5f0:	a1 1d       	adc	r26, r1
 5f2:	b1 1d       	adc	r27, r1
 5f4:	80 93 10 01 	sts	0x0110, r24
 5f8:	90 93 11 01 	sts	0x0111, r25
 5fc:	a0 93 12 01 	sts	0x0112, r26
 600:	b0 93 13 01 	sts	0x0113, r27
}
 604:	bf 91       	pop	r27
 606:	af 91       	pop	r26
 608:	9f 91       	pop	r25
 60a:	8f 91       	pop	r24
 60c:	3f 91       	pop	r19
 60e:	2f 91       	pop	r18
 610:	0f 90       	pop	r0
 612:	0f be       	out	0x3f, r0	; 63
 614:	0f 90       	pop	r0
 616:	1f 90       	pop	r1
 618:	18 95       	reti

0000061a <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 61a:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
 61c:	f8 94       	cli
	m = timer0_overflow_count;
 61e:	20 91 10 01 	lds	r18, 0x0110
 622:	30 91 11 01 	lds	r19, 0x0111
 626:	40 91 12 01 	lds	r20, 0x0112
 62a:	50 91 13 01 	lds	r21, 0x0113
#if defined(TCNT0)
	t = TCNT0;
 62e:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 630:	a8 9b       	sbis	0x15, 0	; 21
 632:	06 c0       	rjmp	.+12     	; 0x640 <micros+0x26>
 634:	8f 3f       	cpi	r24, 0xFF	; 255
 636:	21 f0       	breq	.+8      	; 0x640 <micros+0x26>
		m++;
 638:	2f 5f       	subi	r18, 0xFF	; 255
 63a:	3f 4f       	sbci	r19, 0xFF	; 255
 63c:	4f 4f       	sbci	r20, 0xFF	; 255
 63e:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 640:	9f bf       	out	0x3f, r25	; 63
 642:	54 2f       	mov	r21, r20
 644:	43 2f       	mov	r20, r19
 646:	32 2f       	mov	r19, r18
 648:	22 27       	eor	r18, r18
 64a:	28 0f       	add	r18, r24
 64c:	31 1d       	adc	r19, r1
 64e:	41 1d       	adc	r20, r1
 650:	51 1d       	adc	r21, r1
 652:	82 e0       	ldi	r24, 0x02	; 2
 654:	22 0f       	add	r18, r18
 656:	33 1f       	adc	r19, r19
 658:	44 1f       	adc	r20, r20
 65a:	55 1f       	adc	r21, r21
 65c:	8a 95       	dec	r24
 65e:	d1 f7       	brne	.-12     	; 0x654 <micros+0x3a>
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
 660:	b9 01       	movw	r22, r18
 662:	ca 01       	movw	r24, r20
 664:	08 95       	ret

00000666 <delay>:

void delay(unsigned long ms)
{
 666:	9b 01       	movw	r18, r22
 668:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 66a:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
 66c:	f8 94       	cli
	m = timer0_overflow_count;
 66e:	80 91 10 01 	lds	r24, 0x0110
 672:	90 91 11 01 	lds	r25, 0x0111
 676:	a0 91 12 01 	lds	r26, 0x0112
 67a:	b0 91 13 01 	lds	r27, 0x0113
#if defined(TCNT0)
	t = TCNT0;
 67e:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 680:	a8 9b       	sbis	0x15, 0	; 21
 682:	05 c0       	rjmp	.+10     	; 0x68e <delay+0x28>
 684:	6f 3f       	cpi	r22, 0xFF	; 255
 686:	19 f0       	breq	.+6      	; 0x68e <delay+0x28>
		m++;
 688:	01 96       	adiw	r24, 0x01	; 1
 68a:	a1 1d       	adc	r26, r1
 68c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 68e:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
 690:	ba 2f       	mov	r27, r26
 692:	a9 2f       	mov	r26, r25
 694:	98 2f       	mov	r25, r24
 696:	88 27       	eor	r24, r24
 698:	86 0f       	add	r24, r22
 69a:	91 1d       	adc	r25, r1
 69c:	a1 1d       	adc	r26, r1
 69e:	b1 1d       	adc	r27, r1
 6a0:	62 e0       	ldi	r22, 0x02	; 2
 6a2:	88 0f       	add	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	aa 1f       	adc	r26, r26
 6a8:	bb 1f       	adc	r27, r27
 6aa:	6a 95       	dec	r22
 6ac:	d1 f7       	brne	.-12     	; 0x6a2 <delay+0x3c>
 6ae:	bc 01       	movw	r22, r24
 6b0:	2d c0       	rjmp	.+90     	; 0x70c <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 6b2:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
 6b4:	f8 94       	cli
	m = timer0_overflow_count;
 6b6:	80 91 10 01 	lds	r24, 0x0110
 6ba:	90 91 11 01 	lds	r25, 0x0111
 6be:	a0 91 12 01 	lds	r26, 0x0112
 6c2:	b0 91 13 01 	lds	r27, 0x0113
#if defined(TCNT0)
	t = TCNT0;
 6c6:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 6c8:	a8 9b       	sbis	0x15, 0	; 21
 6ca:	05 c0       	rjmp	.+10     	; 0x6d6 <delay+0x70>
 6cc:	ef 3f       	cpi	r30, 0xFF	; 255
 6ce:	19 f0       	breq	.+6      	; 0x6d6 <delay+0x70>
		m++;
 6d0:	01 96       	adiw	r24, 0x01	; 1
 6d2:	a1 1d       	adc	r26, r1
 6d4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 6d6:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
 6d8:	ba 2f       	mov	r27, r26
 6da:	a9 2f       	mov	r26, r25
 6dc:	98 2f       	mov	r25, r24
 6de:	88 27       	eor	r24, r24
 6e0:	8e 0f       	add	r24, r30
 6e2:	91 1d       	adc	r25, r1
 6e4:	a1 1d       	adc	r26, r1
 6e6:	b1 1d       	adc	r27, r1
 6e8:	e2 e0       	ldi	r30, 0x02	; 2
 6ea:	88 0f       	add	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	aa 1f       	adc	r26, r26
 6f0:	bb 1f       	adc	r27, r27
 6f2:	ea 95       	dec	r30
 6f4:	d1 f7       	brne	.-12     	; 0x6ea <delay+0x84>
 6f6:	86 1b       	sub	r24, r22
 6f8:	97 0b       	sbc	r25, r23
 6fa:	88 5e       	subi	r24, 0xE8	; 232
 6fc:	93 40       	sbci	r25, 0x03	; 3
 6fe:	c8 f2       	brcs	.-78     	; 0x6b2 <delay+0x4c>
			ms--;
 700:	21 50       	subi	r18, 0x01	; 1
 702:	30 40       	sbci	r19, 0x00	; 0
 704:	40 40       	sbci	r20, 0x00	; 0
 706:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
 708:	68 51       	subi	r22, 0x18	; 24
 70a:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 70c:	21 15       	cp	r18, r1
 70e:	31 05       	cpc	r19, r1
 710:	41 05       	cpc	r20, r1
 712:	51 05       	cpc	r21, r1
 714:	71 f6       	brne	.-100    	; 0x6b2 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 716:	08 95       	ret

00000718 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 718:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 71a:	84 b5       	in	r24, 0x24	; 36
 71c:	82 60       	ori	r24, 0x02	; 2
 71e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 720:	84 b5       	in	r24, 0x24	; 36
 722:	81 60       	ori	r24, 0x01	; 1
 724:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 726:	85 b5       	in	r24, 0x25	; 37
 728:	82 60       	ori	r24, 0x02	; 2
 72a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 72c:	85 b5       	in	r24, 0x25	; 37
 72e:	81 60       	ori	r24, 0x01	; 1
 730:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 732:	ee e6       	ldi	r30, 0x6E	; 110
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	80 81       	ld	r24, Z
 738:	81 60       	ori	r24, 0x01	; 1
 73a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 73c:	e1 e8       	ldi	r30, 0x81	; 129
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 742:	80 81       	ld	r24, Z
 744:	82 60       	ori	r24, 0x02	; 2
 746:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 748:	80 81       	ld	r24, Z
 74a:	81 60       	ori	r24, 0x01	; 1
 74c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 74e:	e0 e8       	ldi	r30, 0x80	; 128
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	81 60       	ori	r24, 0x01	; 1
 756:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 758:	e1 eb       	ldi	r30, 0xB1	; 177
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	80 81       	ld	r24, Z
 75e:	84 60       	ori	r24, 0x04	; 4
 760:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 762:	e0 eb       	ldi	r30, 0xB0	; 176
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	80 81       	ld	r24, Z
 768:	81 60       	ori	r24, 0x01	; 1
 76a:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 76c:	ea e7       	ldi	r30, 0x7A	; 122
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	80 81       	ld	r24, Z
 772:	84 60       	ori	r24, 0x04	; 4
 774:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 776:	80 81       	ld	r24, Z
 778:	82 60       	ori	r24, 0x02	; 2
 77a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 77c:	80 81       	ld	r24, Z
 77e:	81 60       	ori	r24, 0x01	; 1
 780:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 782:	80 81       	ld	r24, Z
 784:	80 68       	ori	r24, 0x80	; 128
 786:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 788:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 78c:	08 95       	ret

0000078e <_Z11serialEventv>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
 78e:	08 95       	ret

00000790 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
 790:	1f 92       	push	r1
 792:	0f 92       	push	r0
 794:	0f b6       	in	r0, 0x3f	; 63
 796:	0f 92       	push	r0
 798:	11 24       	eor	r1, r1
 79a:	2f 93       	push	r18
 79c:	3f 93       	push	r19
 79e:	4f 93       	push	r20
 7a0:	8f 93       	push	r24
 7a2:	9f 93       	push	r25
 7a4:	ef 93       	push	r30
 7a6:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
 7a8:	80 91 c0 00 	lds	r24, 0x00C0
 7ac:	82 fd       	sbrc	r24, 2
 7ae:	1d c0       	rjmp	.+58     	; 0x7ea <__vector_18+0x5a>
      unsigned char c = UDR0;
 7b0:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
 7b4:	20 91 59 01 	lds	r18, 0x0159
 7b8:	30 91 5a 01 	lds	r19, 0x015A

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
 7bc:	2f 5f       	subi	r18, 0xFF	; 255
 7be:	3f 4f       	sbci	r19, 0xFF	; 255
 7c0:	2f 73       	andi	r18, 0x3F	; 63
 7c2:	30 70       	andi	r19, 0x00	; 0
 7c4:	80 91 5b 01 	lds	r24, 0x015B
 7c8:	90 91 5c 01 	lds	r25, 0x015C
 7cc:	28 17       	cp	r18, r24
 7ce:	39 07       	cpc	r19, r25
 7d0:	71 f0       	breq	.+28     	; 0x7ee <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
 7d2:	e0 91 59 01 	lds	r30, 0x0159
 7d6:	f0 91 5a 01 	lds	r31, 0x015A
 7da:	e7 5e       	subi	r30, 0xE7	; 231
 7dc:	fe 4f       	sbci	r31, 0xFE	; 254
 7de:	40 83       	st	Z, r20
    buffer->head = i;
 7e0:	30 93 5a 01 	sts	0x015A, r19
 7e4:	20 93 59 01 	sts	0x0159, r18
 7e8:	02 c0       	rjmp	.+4      	; 0x7ee <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
 7ea:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
 7ee:	ff 91       	pop	r31
 7f0:	ef 91       	pop	r30
 7f2:	9f 91       	pop	r25
 7f4:	8f 91       	pop	r24
 7f6:	4f 91       	pop	r20
 7f8:	3f 91       	pop	r19
 7fa:	2f 91       	pop	r18
 7fc:	0f 90       	pop	r0
 7fe:	0f be       	out	0x3f, r0	; 63
 800:	0f 90       	pop	r0
 802:	1f 90       	pop	r1
 804:	18 95       	reti

00000806 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
 806:	e0 91 ad 01 	lds	r30, 0x01AD
 80a:	f0 91 ae 01 	lds	r31, 0x01AE
 80e:	e0 5c       	subi	r30, 0xC0	; 192
 810:	ff 4f       	sbci	r31, 0xFF	; 255
 812:	81 91       	ld	r24, Z+
 814:	91 91       	ld	r25, Z+
 816:	20 81       	ld	r18, Z
 818:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
 81a:	82 1b       	sub	r24, r18
 81c:	93 0b       	sbc	r25, r19
 81e:	8f 73       	andi	r24, 0x3F	; 63
 820:	90 70       	andi	r25, 0x00	; 0
 822:	89 2b       	or	r24, r25
 824:	11 f0       	breq	.+4      	; 0x82a <_Z14serialEventRunv+0x24>
 826:	0e 94 c7 03 	call	0x78e	; 0x78e <_Z11serialEventv>
 82a:	08 95       	ret

0000082c <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
 82c:	1f 92       	push	r1
 82e:	0f 92       	push	r0
 830:	0f b6       	in	r0, 0x3f	; 63
 832:	0f 92       	push	r0
 834:	11 24       	eor	r1, r1
 836:	2f 93       	push	r18
 838:	3f 93       	push	r19
 83a:	8f 93       	push	r24
 83c:	9f 93       	push	r25
 83e:	ef 93       	push	r30
 840:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
 842:	20 91 9d 01 	lds	r18, 0x019D
 846:	30 91 9e 01 	lds	r19, 0x019E
 84a:	80 91 9f 01 	lds	r24, 0x019F
 84e:	90 91 a0 01 	lds	r25, 0x01A0
 852:	28 17       	cp	r18, r24
 854:	39 07       	cpc	r19, r25
 856:	31 f4       	brne	.+12     	; 0x864 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
 858:	80 91 c1 00 	lds	r24, 0x00C1
 85c:	8f 7d       	andi	r24, 0xDF	; 223
 85e:	80 93 c1 00 	sts	0x00C1, r24
 862:	14 c0       	rjmp	.+40     	; 0x88c <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 864:	e0 91 9f 01 	lds	r30, 0x019F
 868:	f0 91 a0 01 	lds	r31, 0x01A0
 86c:	e3 5a       	subi	r30, 0xA3	; 163
 86e:	fe 4f       	sbci	r31, 0xFE	; 254
 870:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
 872:	80 91 9f 01 	lds	r24, 0x019F
 876:	90 91 a0 01 	lds	r25, 0x01A0
 87a:	01 96       	adiw	r24, 0x01	; 1
 87c:	8f 73       	andi	r24, 0x3F	; 63
 87e:	90 70       	andi	r25, 0x00	; 0
 880:	90 93 a0 01 	sts	0x01A0, r25
 884:	80 93 9f 01 	sts	0x019F, r24
	
  #if defined(UDR0)
    UDR0 = c;
 888:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
 88c:	ff 91       	pop	r31
 88e:	ef 91       	pop	r30
 890:	9f 91       	pop	r25
 892:	8f 91       	pop	r24
 894:	3f 91       	pop	r19
 896:	2f 91       	pop	r18
 898:	0f 90       	pop	r0
 89a:	0f be       	out	0x3f, r0	; 63
 89c:	0f 90       	pop	r0
 89e:	1f 90       	pop	r1
 8a0:	18 95       	reti

000008a2 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
 8a2:	af 92       	push	r10
 8a4:	bf 92       	push	r11
 8a6:	df 92       	push	r13
 8a8:	ef 92       	push	r14
 8aa:	ff 92       	push	r15
 8ac:	0f 93       	push	r16
 8ae:	1f 93       	push	r17
 8b0:	cf 93       	push	r28
 8b2:	df 93       	push	r29
 8b4:	ec 01       	movw	r28, r24
 8b6:	7a 01       	movw	r14, r20
 8b8:	8b 01       	movw	r16, r22
 8ba:	dd 24       	eor	r13, r13
 8bc:	40 30       	cpi	r20, 0x00	; 0
 8be:	81 ee       	ldi	r24, 0xE1	; 225
 8c0:	58 07       	cpc	r21, r24
 8c2:	80 e0       	ldi	r24, 0x00	; 0
 8c4:	68 07       	cpc	r22, r24
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	78 07       	cpc	r23, r24
 8ca:	11 f0       	breq	.+4      	; 0x8d0 <_ZN14HardwareSerial5beginEm+0x2e>
 8cc:	dd 24       	eor	r13, r13
 8ce:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
 8d0:	91 e0       	ldi	r25, 0x01	; 1
 8d2:	a9 2e       	mov	r10, r25
 8d4:	b1 2c       	mov	r11, r1
 8d6:	ec 89       	ldd	r30, Y+20	; 0x14
 8d8:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
 8da:	dd 20       	and	r13, r13
 8dc:	69 f0       	breq	.+26     	; 0x8f8 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
 8de:	c5 01       	movw	r24, r10
 8e0:	08 a0       	ldd	r0, Y+32	; 0x20
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <_ZN14HardwareSerial5beginEm+0x46>
 8e4:	88 0f       	add	r24, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	0a 94       	dec	r0
 8ea:	e2 f7       	brpl	.-8      	; 0x8e4 <_ZN14HardwareSerial5beginEm+0x42>
 8ec:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
 8ee:	60 e0       	ldi	r22, 0x00	; 0
 8f0:	79 e0       	ldi	r23, 0x09	; 9
 8f2:	8d e3       	ldi	r24, 0x3D	; 61
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	05 c0       	rjmp	.+10     	; 0x902 <__stack+0x3>
  } else {
    *_ucsra = 0;
 8f8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 8fa:	60 e8       	ldi	r22, 0x80	; 128
 8fc:	74 e8       	ldi	r23, 0x84	; 132
 8fe:	8e e1       	ldi	r24, 0x1E	; 30
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	a8 01       	movw	r20, r16
 904:	97 01       	movw	r18, r14
 906:	0e 94 78 07 	call	0xef0	; 0xef0 <__udivmodsi4>
 90a:	21 50       	subi	r18, 0x01	; 1
 90c:	30 40       	sbci	r19, 0x00	; 0
 90e:	40 40       	sbci	r20, 0x00	; 0
 910:	50 40       	sbci	r21, 0x00	; 0
 912:	56 95       	lsr	r21
 914:	47 95       	ror	r20
 916:	37 95       	ror	r19
 918:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
 91a:	80 e1       	ldi	r24, 0x10	; 16
 91c:	20 30       	cpi	r18, 0x00	; 0
 91e:	38 07       	cpc	r19, r24
 920:	20 f0       	brcs	.+8      	; 0x92a <__stack+0x2b>
 922:	dd 20       	and	r13, r13
 924:	11 f0       	breq	.+4      	; 0x92a <__stack+0x2b>
 926:	dd 24       	eor	r13, r13
 928:	d6 cf       	rjmp	.-84     	; 0x8d6 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 92a:	e8 89       	ldd	r30, Y+16	; 0x10
 92c:	f9 89       	ldd	r31, Y+17	; 0x11
 92e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 930:	ea 89       	ldd	r30, Y+18	; 0x12
 932:	fb 89       	ldd	r31, Y+19	; 0x13
 934:	20 83       	st	Z, r18

  transmitting = false;
 936:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
 938:	ee 89       	ldd	r30, Y+22	; 0x16
 93a:	ff 89       	ldd	r31, Y+23	; 0x17
 93c:	40 81       	ld	r20, Z
 93e:	21 e0       	ldi	r18, 0x01	; 1
 940:	30 e0       	ldi	r19, 0x00	; 0
 942:	c9 01       	movw	r24, r18
 944:	0c 8c       	ldd	r0, Y+28	; 0x1c
 946:	02 c0       	rjmp	.+4      	; 0x94c <__stack+0x4d>
 948:	88 0f       	add	r24, r24
 94a:	99 1f       	adc	r25, r25
 94c:	0a 94       	dec	r0
 94e:	e2 f7       	brpl	.-8      	; 0x948 <__stack+0x49>
 950:	48 2b       	or	r20, r24
 952:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
 954:	ee 89       	ldd	r30, Y+22	; 0x16
 956:	ff 89       	ldd	r31, Y+23	; 0x17
 958:	40 81       	ld	r20, Z
 95a:	c9 01       	movw	r24, r18
 95c:	0d 8c       	ldd	r0, Y+29	; 0x1d
 95e:	02 c0       	rjmp	.+4      	; 0x964 <__stack+0x65>
 960:	88 0f       	add	r24, r24
 962:	99 1f       	adc	r25, r25
 964:	0a 94       	dec	r0
 966:	e2 f7       	brpl	.-8      	; 0x960 <__stack+0x61>
 968:	48 2b       	or	r20, r24
 96a:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
 96c:	ee 89       	ldd	r30, Y+22	; 0x16
 96e:	ff 89       	ldd	r31, Y+23	; 0x17
 970:	40 81       	ld	r20, Z
 972:	c9 01       	movw	r24, r18
 974:	0e 8c       	ldd	r0, Y+30	; 0x1e
 976:	02 c0       	rjmp	.+4      	; 0x97c <__stack+0x7d>
 978:	88 0f       	add	r24, r24
 97a:	99 1f       	adc	r25, r25
 97c:	0a 94       	dec	r0
 97e:	e2 f7       	brpl	.-8      	; 0x978 <__stack+0x79>
 980:	48 2b       	or	r20, r24
 982:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
 984:	ee 89       	ldd	r30, Y+22	; 0x16
 986:	ff 89       	ldd	r31, Y+23	; 0x17
 988:	80 81       	ld	r24, Z
 98a:	0f 8c       	ldd	r0, Y+31	; 0x1f
 98c:	02 c0       	rjmp	.+4      	; 0x992 <__stack+0x93>
 98e:	22 0f       	add	r18, r18
 990:	33 1f       	adc	r19, r19
 992:	0a 94       	dec	r0
 994:	e2 f7       	brpl	.-8      	; 0x98e <__stack+0x8f>
 996:	20 95       	com	r18
 998:	28 23       	and	r18, r24
 99a:	20 83       	st	Z, r18
}
 99c:	df 91       	pop	r29
 99e:	cf 91       	pop	r28
 9a0:	1f 91       	pop	r17
 9a2:	0f 91       	pop	r16
 9a4:	ff 90       	pop	r15
 9a6:	ef 90       	pop	r14
 9a8:	df 90       	pop	r13
 9aa:	bf 90       	pop	r11
 9ac:	af 90       	pop	r10
 9ae:	08 95       	ret

000009b0 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
 9b0:	dc 01       	movw	r26, r24
 9b2:	1c 96       	adiw	r26, 0x0c	; 12
 9b4:	ed 91       	ld	r30, X+
 9b6:	fc 91       	ld	r31, X
 9b8:	1d 97       	sbiw	r26, 0x0d	; 13
 9ba:	e0 5c       	subi	r30, 0xC0	; 192
 9bc:	ff 4f       	sbci	r31, 0xFF	; 255
 9be:	21 91       	ld	r18, Z+
 9c0:	31 91       	ld	r19, Z+
 9c2:	80 81       	ld	r24, Z
 9c4:	91 81       	ldd	r25, Z+1	; 0x01
 9c6:	28 1b       	sub	r18, r24
 9c8:	39 0b       	sbc	r19, r25
 9ca:	2f 73       	andi	r18, 0x3F	; 63
 9cc:	30 70       	andi	r19, 0x00	; 0
}
 9ce:	c9 01       	movw	r24, r18
 9d0:	08 95       	ret

000009d2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
 9d2:	dc 01       	movw	r26, r24
 9d4:	1c 96       	adiw	r26, 0x0c	; 12
 9d6:	ed 91       	ld	r30, X+
 9d8:	fc 91       	ld	r31, X
 9da:	1d 97       	sbiw	r26, 0x0d	; 13
 9dc:	e0 5c       	subi	r30, 0xC0	; 192
 9de:	ff 4f       	sbci	r31, 0xFF	; 255
 9e0:	20 81       	ld	r18, Z
 9e2:	31 81       	ldd	r19, Z+1	; 0x01
 9e4:	e0 54       	subi	r30, 0x40	; 64
 9e6:	f0 40       	sbci	r31, 0x00	; 0
 9e8:	df 01       	movw	r26, r30
 9ea:	ae 5b       	subi	r26, 0xBE	; 190
 9ec:	bf 4f       	sbci	r27, 0xFF	; 255
 9ee:	8d 91       	ld	r24, X+
 9f0:	9c 91       	ld	r25, X
 9f2:	11 97       	sbiw	r26, 0x01	; 1
 9f4:	28 17       	cp	r18, r24
 9f6:	39 07       	cpc	r19, r25
 9f8:	19 f4       	brne	.+6      	; 0xa00 <_ZN14HardwareSerial4peekEv+0x2e>
 9fa:	2f ef       	ldi	r18, 0xFF	; 255
 9fc:	3f ef       	ldi	r19, 0xFF	; 255
 9fe:	07 c0       	rjmp	.+14     	; 0xa0e <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
 a00:	8d 91       	ld	r24, X+
 a02:	9c 91       	ld	r25, X
 a04:	e8 0f       	add	r30, r24
 a06:	f9 1f       	adc	r31, r25
 a08:	80 81       	ld	r24, Z
 a0a:	28 2f       	mov	r18, r24
 a0c:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 a0e:	c9 01       	movw	r24, r18
 a10:	08 95       	ret

00000a12 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
 a12:	dc 01       	movw	r26, r24
 a14:	1c 96       	adiw	r26, 0x0c	; 12
 a16:	ed 91       	ld	r30, X+
 a18:	fc 91       	ld	r31, X
 a1a:	1d 97       	sbiw	r26, 0x0d	; 13
 a1c:	e0 5c       	subi	r30, 0xC0	; 192
 a1e:	ff 4f       	sbci	r31, 0xFF	; 255
 a20:	20 81       	ld	r18, Z
 a22:	31 81       	ldd	r19, Z+1	; 0x01
 a24:	e0 54       	subi	r30, 0x40	; 64
 a26:	f0 40       	sbci	r31, 0x00	; 0
 a28:	df 01       	movw	r26, r30
 a2a:	ae 5b       	subi	r26, 0xBE	; 190
 a2c:	bf 4f       	sbci	r27, 0xFF	; 255
 a2e:	8d 91       	ld	r24, X+
 a30:	9c 91       	ld	r25, X
 a32:	11 97       	sbiw	r26, 0x01	; 1
 a34:	28 17       	cp	r18, r24
 a36:	39 07       	cpc	r19, r25
 a38:	19 f4       	brne	.+6      	; 0xa40 <_ZN14HardwareSerial4readEv+0x2e>
 a3a:	2f ef       	ldi	r18, 0xFF	; 255
 a3c:	3f ef       	ldi	r19, 0xFF	; 255
 a3e:	10 c0       	rjmp	.+32     	; 0xa60 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 a40:	8d 91       	ld	r24, X+
 a42:	9c 91       	ld	r25, X
 a44:	11 97       	sbiw	r26, 0x01	; 1
 a46:	e8 0f       	add	r30, r24
 a48:	f9 1f       	adc	r31, r25
 a4a:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
 a4c:	8d 91       	ld	r24, X+
 a4e:	9c 91       	ld	r25, X
 a50:	11 97       	sbiw	r26, 0x01	; 1
 a52:	01 96       	adiw	r24, 0x01	; 1
 a54:	8f 73       	andi	r24, 0x3F	; 63
 a56:	90 70       	andi	r25, 0x00	; 0
 a58:	11 96       	adiw	r26, 0x01	; 1
 a5a:	9c 93       	st	X, r25
 a5c:	8e 93       	st	-X, r24
    return c;
 a5e:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 a60:	c9 01       	movw	r24, r18
 a62:	08 95       	ret

00000a64 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
 a64:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
 a66:	91 96       	adiw	r26, 0x21	; 33
 a68:	8c 91       	ld	r24, X
 a6a:	91 97       	sbiw	r26, 0x21	; 33
 a6c:	88 23       	and	r24, r24
 a6e:	39 f0       	breq	.+14     	; 0xa7e <_ZN14HardwareSerial5flushEv+0x1a>
 a70:	54 96       	adiw	r26, 0x14	; 20
 a72:	ed 91       	ld	r30, X+
 a74:	fc 91       	ld	r31, X
 a76:	55 97       	sbiw	r26, 0x15	; 21
 a78:	80 81       	ld	r24, Z
 a7a:	86 ff       	sbrs	r24, 6
 a7c:	f9 cf       	rjmp	.-14     	; 0xa70 <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
 a7e:	91 96       	adiw	r26, 0x21	; 33
 a80:	1c 92       	st	X, r1
}
 a82:	08 95       	ret

00000a84 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
 a84:	cf 93       	push	r28
 a86:	df 93       	push	r29
 a88:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
 a8a:	ee 85       	ldd	r30, Y+14	; 0x0e
 a8c:	ff 85       	ldd	r31, Y+15	; 0x0f
 a8e:	e0 5c       	subi	r30, 0xC0	; 192
 a90:	ff 4f       	sbci	r31, 0xFF	; 255
 a92:	20 81       	ld	r18, Z
 a94:	31 81       	ldd	r19, Z+1	; 0x01
 a96:	e0 54       	subi	r30, 0x40	; 64
 a98:	f0 40       	sbci	r31, 0x00	; 0
 a9a:	2f 5f       	subi	r18, 0xFF	; 255
 a9c:	3f 4f       	sbci	r19, 0xFF	; 255
 a9e:	2f 73       	andi	r18, 0x3F	; 63
 aa0:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
 aa2:	df 01       	movw	r26, r30
 aa4:	ae 5b       	subi	r26, 0xBE	; 190
 aa6:	bf 4f       	sbci	r27, 0xFF	; 255
 aa8:	8d 91       	ld	r24, X+
 aaa:	9c 91       	ld	r25, X
 aac:	11 97       	sbiw	r26, 0x01	; 1
 aae:	28 17       	cp	r18, r24
 ab0:	39 07       	cpc	r19, r25
 ab2:	d1 f3       	breq	.-12     	; 0xaa8 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
 ab4:	e0 5c       	subi	r30, 0xC0	; 192
 ab6:	ff 4f       	sbci	r31, 0xFF	; 255
 ab8:	80 81       	ld	r24, Z
 aba:	91 81       	ldd	r25, Z+1	; 0x01
 abc:	e0 54       	subi	r30, 0x40	; 64
 abe:	f0 40       	sbci	r31, 0x00	; 0
 ac0:	e8 0f       	add	r30, r24
 ac2:	f9 1f       	adc	r31, r25
 ac4:	60 83       	st	Z, r22
  _tx_buffer->head = i;
 ac6:	ee 85       	ldd	r30, Y+14	; 0x0e
 ac8:	ff 85       	ldd	r31, Y+15	; 0x0f
 aca:	e0 5c       	subi	r30, 0xC0	; 192
 acc:	ff 4f       	sbci	r31, 0xFF	; 255
 ace:	31 83       	std	Z+1, r19	; 0x01
 ad0:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
 ad2:	ee 89       	ldd	r30, Y+22	; 0x16
 ad4:	ff 89       	ldd	r31, Y+23	; 0x17
 ad6:	20 81       	ld	r18, Z
 ad8:	81 e0       	ldi	r24, 0x01	; 1
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	0f 8c       	ldd	r0, Y+31	; 0x1f
 ade:	02 c0       	rjmp	.+4      	; 0xae4 <_ZN14HardwareSerial5writeEh+0x60>
 ae0:	88 0f       	add	r24, r24
 ae2:	99 1f       	adc	r25, r25
 ae4:	0a 94       	dec	r0
 ae6:	e2 f7       	brpl	.-8      	; 0xae0 <_ZN14HardwareSerial5writeEh+0x5c>
 ae8:	28 2b       	or	r18, r24
 aea:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
 aec:	81 e0       	ldi	r24, 0x01	; 1
 aee:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
 af0:	ec 89       	ldd	r30, Y+20	; 0x14
 af2:	fd 89       	ldd	r31, Y+21	; 0x15
 af4:	80 81       	ld	r24, Z
 af6:	80 64       	ori	r24, 0x40	; 64
 af8:	80 83       	st	Z, r24
  
  return 1;
}
 afa:	81 e0       	ldi	r24, 0x01	; 1
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	df 91       	pop	r29
 b00:	cf 91       	pop	r28
 b02:	08 95       	ret

00000b04 <_ZN14HardwareSerialcvbEv>:

HardwareSerial::operator bool() {
	return true;
}
 b04:	81 e0       	ldi	r24, 0x01	; 1
 b06:	08 95       	ret

00000b08 <_GLOBAL__I_rx_buffer>:
 b08:	10 92 a4 01 	sts	0x01A4, r1
 b0c:	10 92 a3 01 	sts	0x01A3, r1
 b10:	88 ee       	ldi	r24, 0xE8	; 232
 b12:	93 e0       	ldi	r25, 0x03	; 3
 b14:	a0 e0       	ldi	r26, 0x00	; 0
 b16:	b0 e0       	ldi	r27, 0x00	; 0
 b18:	80 93 a5 01 	sts	0x01A5, r24
 b1c:	90 93 a6 01 	sts	0x01A6, r25
 b20:	a0 93 a7 01 	sts	0x01A7, r26
 b24:	b0 93 a8 01 	sts	0x01A8, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
 b28:	84 e0       	ldi	r24, 0x04	; 4
 b2a:	91 e0       	ldi	r25, 0x01	; 1
 b2c:	90 93 a2 01 	sts	0x01A2, r25
 b30:	80 93 a1 01 	sts	0x01A1, r24
{
  _rx_buffer = rx_buffer;
 b34:	89 e1       	ldi	r24, 0x19	; 25
 b36:	91 e0       	ldi	r25, 0x01	; 1
 b38:	90 93 ae 01 	sts	0x01AE, r25
 b3c:	80 93 ad 01 	sts	0x01AD, r24
  _tx_buffer = tx_buffer;
 b40:	8d e5       	ldi	r24, 0x5D	; 93
 b42:	91 e0       	ldi	r25, 0x01	; 1
 b44:	90 93 b0 01 	sts	0x01B0, r25
 b48:	80 93 af 01 	sts	0x01AF, r24
  _ubrrh = ubrrh;
 b4c:	85 ec       	ldi	r24, 0xC5	; 197
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	90 93 b2 01 	sts	0x01B2, r25
 b54:	80 93 b1 01 	sts	0x01B1, r24
  _ubrrl = ubrrl;
 b58:	84 ec       	ldi	r24, 0xC4	; 196
 b5a:	90 e0       	ldi	r25, 0x00	; 0
 b5c:	90 93 b4 01 	sts	0x01B4, r25
 b60:	80 93 b3 01 	sts	0x01B3, r24
  _ucsra = ucsra;
 b64:	80 ec       	ldi	r24, 0xC0	; 192
 b66:	90 e0       	ldi	r25, 0x00	; 0
 b68:	90 93 b6 01 	sts	0x01B6, r25
 b6c:	80 93 b5 01 	sts	0x01B5, r24
  _ucsrb = ucsrb;
 b70:	81 ec       	ldi	r24, 0xC1	; 193
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	90 93 b8 01 	sts	0x01B8, r25
 b78:	80 93 b7 01 	sts	0x01B7, r24
  _ucsrc = ucsrc;
 b7c:	82 ec       	ldi	r24, 0xC2	; 194
 b7e:	90 e0       	ldi	r25, 0x00	; 0
 b80:	90 93 ba 01 	sts	0x01BA, r25
 b84:	80 93 b9 01 	sts	0x01B9, r24
  _udr = udr;
 b88:	86 ec       	ldi	r24, 0xC6	; 198
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	90 93 bc 01 	sts	0x01BC, r25
 b90:	80 93 bb 01 	sts	0x01BB, r24
  _rxen = rxen;
 b94:	84 e0       	ldi	r24, 0x04	; 4
 b96:	80 93 bd 01 	sts	0x01BD, r24
  _txen = txen;
 b9a:	83 e0       	ldi	r24, 0x03	; 3
 b9c:	80 93 be 01 	sts	0x01BE, r24
  _rxcie = rxcie;
 ba0:	87 e0       	ldi	r24, 0x07	; 7
 ba2:	80 93 bf 01 	sts	0x01BF, r24
  _udrie = udrie;
 ba6:	85 e0       	ldi	r24, 0x05	; 5
 ba8:	80 93 c0 01 	sts	0x01C0, r24
  _u2x = u2x;
 bac:	81 e0       	ldi	r24, 0x01	; 1
 bae:	80 93 c1 01 	sts	0x01C1, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
 bb2:	08 95       	ret

00000bb4 <main>:
#include <Arduino.h>

int main(void)
 bb4:	cf 93       	push	r28
 bb6:	df 93       	push	r29
{
	init();
 bb8:	0e 94 8c 03 	call	0x718	; 0x718 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 bbc:	0e 94 9e 02 	call	0x53c	; 0x53c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 bc0:	c3 e0       	ldi	r28, 0x03	; 3
 bc2:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
 bc4:	0e 94 55 02 	call	0x4aa	; 0x4aa <loop>
		if (serialEventRun) serialEventRun();
 bc8:	20 97       	sbiw	r28, 0x00	; 0
 bca:	e1 f3       	breq	.-8      	; 0xbc4 <main+0x10>
 bcc:	0e 94 03 04 	call	0x806	; 0x806 <_Z14serialEventRunv>
 bd0:	f9 cf       	rjmp	.-14     	; 0xbc4 <main+0x10>

00000bd2 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
 bd2:	cf 92       	push	r12
 bd4:	df 92       	push	r13
 bd6:	ef 92       	push	r14
 bd8:	ff 92       	push	r15
 bda:	0f 93       	push	r16
 bdc:	1f 93       	push	r17
 bde:	cf 93       	push	r28
 be0:	df 93       	push	r29
 be2:	7c 01       	movw	r14, r24
 be4:	6b 01       	movw	r12, r22
 be6:	8a 01       	movw	r16, r20
 be8:	c0 e0       	ldi	r28, 0x00	; 0
 bea:	d0 e0       	ldi	r29, 0x00	; 0
 bec:	0f c0       	rjmp	.+30     	; 0xc0c <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
 bee:	d6 01       	movw	r26, r12
 bf0:	6d 91       	ld	r22, X+
 bf2:	6d 01       	movw	r12, r26
 bf4:	d7 01       	movw	r26, r14
 bf6:	ed 91       	ld	r30, X+
 bf8:	fc 91       	ld	r31, X
 bfa:	01 90       	ld	r0, Z+
 bfc:	f0 81       	ld	r31, Z
 bfe:	e0 2d       	mov	r30, r0
 c00:	c7 01       	movw	r24, r14
 c02:	09 95       	icall
 c04:	c8 0f       	add	r28, r24
 c06:	d9 1f       	adc	r29, r25
 c08:	01 50       	subi	r16, 0x01	; 1
 c0a:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 c0c:	01 15       	cp	r16, r1
 c0e:	11 05       	cpc	r17, r1
 c10:	71 f7       	brne	.-36     	; 0xbee <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
 c12:	ce 01       	movw	r24, r28
 c14:	df 91       	pop	r29
 c16:	cf 91       	pop	r28
 c18:	1f 91       	pop	r17
 c1a:	0f 91       	pop	r16
 c1c:	ff 90       	pop	r15
 c1e:	ef 90       	pop	r14
 c20:	df 90       	pop	r13
 c22:	cf 90       	pop	r12
 c24:	08 95       	ret

00000c26 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
 c26:	ef 92       	push	r14
 c28:	ff 92       	push	r15
 c2a:	0f 93       	push	r16
 c2c:	1f 93       	push	r17
 c2e:	cf 93       	push	r28
 c30:	df 93       	push	r29
 c32:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
 c34:	8b 01       	movw	r16, r22
 c36:	c0 e0       	ldi	r28, 0x00	; 0
 c38:	d0 e0       	ldi	r29, 0x00	; 0
 c3a:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
 c3c:	0f 5f       	subi	r16, 0xFF	; 255
 c3e:	1f 4f       	sbci	r17, 0xFF	; 255
 c40:	64 91       	lpm	r22, Z+
    if (c == 0) break;
 c42:	66 23       	and	r22, r22
 c44:	59 f0       	breq	.+22     	; 0xc5c <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
 c46:	d7 01       	movw	r26, r14
 c48:	ed 91       	ld	r30, X+
 c4a:	fc 91       	ld	r31, X
 c4c:	01 90       	ld	r0, Z+
 c4e:	f0 81       	ld	r31, Z
 c50:	e0 2d       	mov	r30, r0
 c52:	c7 01       	movw	r24, r14
 c54:	09 95       	icall
 c56:	c8 0f       	add	r28, r24
 c58:	d9 1f       	adc	r29, r25
 c5a:	ef cf       	rjmp	.-34     	; 0xc3a <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
 c5c:	ce 01       	movw	r24, r28
 c5e:	df 91       	pop	r29
 c60:	cf 91       	pop	r28
 c62:	1f 91       	pop	r17
 c64:	0f 91       	pop	r16
 c66:	ff 90       	pop	r15
 c68:	ef 90       	pop	r14
 c6a:	08 95       	ret

00000c6c <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
 c6c:	dc 01       	movw	r26, r24
{
  return write(c);
 c6e:	ed 91       	ld	r30, X+
 c70:	fc 91       	ld	r31, X
 c72:	01 90       	ld	r0, Z+
 c74:	f0 81       	ld	r31, Z
 c76:	e0 2d       	mov	r30, r0
 c78:	09 95       	icall
}
 c7a:	08 95       	ret

00000c7c <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
 c7c:	ef 92       	push	r14
 c7e:	ff 92       	push	r15
 c80:	0f 93       	push	r16
 c82:	1f 93       	push	r17
 c84:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 c86:	dc 01       	movw	r26, r24
 c88:	ed 91       	ld	r30, X+
 c8a:	fc 91       	ld	r31, X
 c8c:	01 90       	ld	r0, Z+
 c8e:	f0 81       	ld	r31, Z
 c90:	e0 2d       	mov	r30, r0
 c92:	6d e0       	ldi	r22, 0x0D	; 13
 c94:	09 95       	icall
 c96:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
 c98:	d8 01       	movw	r26, r16
 c9a:	ed 91       	ld	r30, X+
 c9c:	fc 91       	ld	r31, X
 c9e:	01 90       	ld	r0, Z+
 ca0:	f0 81       	ld	r31, Z
 ca2:	e0 2d       	mov	r30, r0
 ca4:	c8 01       	movw	r24, r16
 ca6:	6a e0       	ldi	r22, 0x0A	; 10
 ca8:	09 95       	icall
 caa:	9c 01       	movw	r18, r24
 cac:	2e 0d       	add	r18, r14
 cae:	3f 1d       	adc	r19, r15
 cb0:	c9 01       	movw	r24, r18
 cb2:	1f 91       	pop	r17
 cb4:	0f 91       	pop	r16
 cb6:	ff 90       	pop	r15
 cb8:	ef 90       	pop	r14
 cba:	08 95       	ret

00000cbc <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
 cbc:	ef 92       	push	r14
 cbe:	ff 92       	push	r15
 cc0:	0f 93       	push	r16
 cc2:	1f 93       	push	r17
 cc4:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
 cc6:	0e 94 13 06 	call	0xc26	; 0xc26 <_ZN5Print5printEPK19__FlashStringHelper>
 cca:	8c 01       	movw	r16, r24
  n += println();
 ccc:	c7 01       	movw	r24, r14
 cce:	0e 94 3e 06 	call	0xc7c	; 0xc7c <_ZN5Print7printlnEv>
 cd2:	9c 01       	movw	r18, r24
 cd4:	20 0f       	add	r18, r16
 cd6:	31 1f       	adc	r19, r17
  return n;
}
 cd8:	c9 01       	movw	r24, r18
 cda:	1f 91       	pop	r17
 cdc:	0f 91       	pop	r16
 cde:	ff 90       	pop	r15
 ce0:	ef 90       	pop	r14
 ce2:	08 95       	ret

00000ce4 <_ZN5Print5writeEPKc>:
 ce4:	cf 93       	push	r28
 ce6:	df 93       	push	r29
 ce8:	ec 01       	movw	r28, r24
 cea:	61 15       	cp	r22, r1
 cec:	71 05       	cpc	r23, r1
 cee:	19 f4       	brne	.+6      	; 0xcf6 <_ZN5Print5writeEPKc+0x12>
 cf0:	20 e0       	ldi	r18, 0x00	; 0
 cf2:	30 e0       	ldi	r19, 0x00	; 0
 cf4:	0f c0       	rjmp	.+30     	; 0xd14 <_ZN5Print5writeEPKc+0x30>
 cf6:	db 01       	movw	r26, r22
 cf8:	0d 90       	ld	r0, X+
 cfa:	00 20       	and	r0, r0
 cfc:	e9 f7       	brne	.-6      	; 0xcf8 <_ZN5Print5writeEPKc+0x14>
 cfe:	11 97       	sbiw	r26, 0x01	; 1
 d00:	a6 1b       	sub	r26, r22
 d02:	b7 0b       	sbc	r27, r23
 d04:	e8 81       	ld	r30, Y
 d06:	f9 81       	ldd	r31, Y+1	; 0x01
 d08:	02 80       	ldd	r0, Z+2	; 0x02
 d0a:	f3 81       	ldd	r31, Z+3	; 0x03
 d0c:	e0 2d       	mov	r30, r0
 d0e:	ad 01       	movw	r20, r26
 d10:	09 95       	icall
 d12:	9c 01       	movw	r18, r24
 d14:	c9 01       	movw	r24, r18
 d16:	df 91       	pop	r29
 d18:	cf 91       	pop	r28
 d1a:	08 95       	ret

00000d1c <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 d1c:	4f 92       	push	r4
 d1e:	5f 92       	push	r5
 d20:	7f 92       	push	r7
 d22:	8f 92       	push	r8
 d24:	9f 92       	push	r9
 d26:	af 92       	push	r10
 d28:	bf 92       	push	r11
 d2a:	cf 92       	push	r12
 d2c:	df 92       	push	r13
 d2e:	ef 92       	push	r14
 d30:	ff 92       	push	r15
 d32:	0f 93       	push	r16
 d34:	1f 93       	push	r17
 d36:	df 93       	push	r29
 d38:	cf 93       	push	r28
 d3a:	cd b7       	in	r28, 0x3d	; 61
 d3c:	de b7       	in	r29, 0x3e	; 62
 d3e:	a1 97       	sbiw	r28, 0x21	; 33
 d40:	0f b6       	in	r0, 0x3f	; 63
 d42:	f8 94       	cli
 d44:	de bf       	out	0x3e, r29	; 62
 d46:	0f be       	out	0x3f, r0	; 63
 d48:	cd bf       	out	0x3d, r28	; 61
 d4a:	2c 01       	movw	r4, r24
 d4c:	74 2e       	mov	r7, r20
 d4e:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 d50:	22 30       	cpi	r18, 0x02	; 2
 d52:	08 f4       	brcc	.+2      	; 0xd56 <_ZN5Print11printNumberEmh+0x3a>
 d54:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 d56:	19 a2       	std	Y+33, r1	; 0x21
 d58:	31 e2       	ldi	r19, 0x21	; 33
 d5a:	c3 2e       	mov	r12, r19
 d5c:	d1 2c       	mov	r13, r1
 d5e:	cc 0e       	add	r12, r28
 d60:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 d62:	82 2e       	mov	r8, r18
 d64:	99 24       	eor	r9, r9
 d66:	aa 24       	eor	r10, r10
 d68:	bb 24       	eor	r11, r11
 d6a:	67 2d       	mov	r22, r7
 d6c:	75 2f       	mov	r23, r21
 d6e:	a5 01       	movw	r20, r10
 d70:	94 01       	movw	r18, r8
 d72:	0e 94 78 07 	call	0xef0	; 0xef0 <__udivmodsi4>
 d76:	79 01       	movw	r14, r18
 d78:	8a 01       	movw	r16, r20
    char c = m - base * n;
 d7a:	c8 01       	movw	r24, r16
 d7c:	b7 01       	movw	r22, r14
 d7e:	a5 01       	movw	r20, r10
 d80:	94 01       	movw	r18, r8
 d82:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__mulsi3>
 d86:	47 2d       	mov	r20, r7
 d88:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 d8a:	08 94       	sec
 d8c:	c1 08       	sbc	r12, r1
 d8e:	d1 08       	sbc	r13, r1
 d90:	4a 30       	cpi	r20, 0x0A	; 10
 d92:	14 f4       	brge	.+4      	; 0xd98 <_ZN5Print11printNumberEmh+0x7c>
 d94:	40 5d       	subi	r20, 0xD0	; 208
 d96:	01 c0       	rjmp	.+2      	; 0xd9a <_ZN5Print11printNumberEmh+0x7e>
 d98:	49 5c       	subi	r20, 0xC9	; 201
 d9a:	f6 01       	movw	r30, r12
 d9c:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 d9e:	e1 14       	cp	r14, r1
 da0:	f1 04       	cpc	r15, r1
 da2:	01 05       	cpc	r16, r1
 da4:	11 05       	cpc	r17, r1
 da6:	21 f0       	breq	.+8      	; 0xdb0 <_ZN5Print11printNumberEmh+0x94>
 da8:	7e 2c       	mov	r7, r14
 daa:	5f 2d       	mov	r21, r15
 dac:	c8 01       	movw	r24, r16
 dae:	dd cf       	rjmp	.-70     	; 0xd6a <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 db0:	c2 01       	movw	r24, r4
 db2:	b6 01       	movw	r22, r12
 db4:	0e 94 72 06 	call	0xce4	; 0xce4 <_ZN5Print5writeEPKc>
}
 db8:	a1 96       	adiw	r28, 0x21	; 33
 dba:	0f b6       	in	r0, 0x3f	; 63
 dbc:	f8 94       	cli
 dbe:	de bf       	out	0x3e, r29	; 62
 dc0:	0f be       	out	0x3f, r0	; 63
 dc2:	cd bf       	out	0x3d, r28	; 61
 dc4:	cf 91       	pop	r28
 dc6:	df 91       	pop	r29
 dc8:	1f 91       	pop	r17
 dca:	0f 91       	pop	r16
 dcc:	ff 90       	pop	r15
 dce:	ef 90       	pop	r14
 dd0:	df 90       	pop	r13
 dd2:	cf 90       	pop	r12
 dd4:	bf 90       	pop	r11
 dd6:	af 90       	pop	r10
 dd8:	9f 90       	pop	r9
 dda:	8f 90       	pop	r8
 ddc:	7f 90       	pop	r7
 dde:	5f 90       	pop	r5
 de0:	4f 90       	pop	r4
 de2:	08 95       	ret

00000de4 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
 de4:	cf 92       	push	r12
 de6:	df 92       	push	r13
 de8:	ef 92       	push	r14
 dea:	ff 92       	push	r15
 dec:	0f 93       	push	r16
 dee:	1f 93       	push	r17
 df0:	cf 93       	push	r28
 df2:	df 93       	push	r29
 df4:	ec 01       	movw	r28, r24
 df6:	6a 01       	movw	r12, r20
 df8:	7b 01       	movw	r14, r22
{
  if (base == 0) {
 dfa:	21 15       	cp	r18, r1
 dfc:	31 05       	cpc	r19, r1
 dfe:	41 f4       	brne	.+16     	; 0xe10 <_ZN5Print5printEli+0x2c>
    return write(n);
 e00:	e8 81       	ld	r30, Y
 e02:	f9 81       	ldd	r31, Y+1	; 0x01
 e04:	01 90       	ld	r0, Z+
 e06:	f0 81       	ld	r31, Z
 e08:	e0 2d       	mov	r30, r0
 e0a:	64 2f       	mov	r22, r20
 e0c:	09 95       	icall
 e0e:	1f c0       	rjmp	.+62     	; 0xe4e <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
 e10:	2a 30       	cpi	r18, 0x0A	; 10
 e12:	31 05       	cpc	r19, r1
 e14:	d1 f4       	brne	.+52     	; 0xe4a <_ZN5Print5printEli+0x66>
    if (n < 0) {
 e16:	77 ff       	sbrs	r23, 7
 e18:	17 c0       	rjmp	.+46     	; 0xe48 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 e1a:	e8 81       	ld	r30, Y
 e1c:	f9 81       	ldd	r31, Y+1	; 0x01
 e1e:	01 90       	ld	r0, Z+
 e20:	f0 81       	ld	r31, Z
 e22:	e0 2d       	mov	r30, r0
 e24:	6d e2       	ldi	r22, 0x2D	; 45
 e26:	09 95       	icall
 e28:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
 e2a:	44 27       	eor	r20, r20
 e2c:	55 27       	eor	r21, r21
 e2e:	ba 01       	movw	r22, r20
 e30:	4c 19       	sub	r20, r12
 e32:	5d 09       	sbc	r21, r13
 e34:	6e 09       	sbc	r22, r14
 e36:	7f 09       	sbc	r23, r15
 e38:	ce 01       	movw	r24, r28
 e3a:	2a e0       	ldi	r18, 0x0A	; 10
 e3c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <_ZN5Print11printNumberEmh>
 e40:	98 01       	movw	r18, r16
 e42:	28 0f       	add	r18, r24
 e44:	39 1f       	adc	r19, r25
 e46:	04 c0       	rjmp	.+8      	; 0xe50 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
 e48:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
 e4a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <_ZN5Print11printNumberEmh>
 e4e:	9c 01       	movw	r18, r24
  }
}
 e50:	c9 01       	movw	r24, r18
 e52:	df 91       	pop	r29
 e54:	cf 91       	pop	r28
 e56:	1f 91       	pop	r17
 e58:	0f 91       	pop	r16
 e5a:	ff 90       	pop	r15
 e5c:	ef 90       	pop	r14
 e5e:	df 90       	pop	r13
 e60:	cf 90       	pop	r12
 e62:	08 95       	ret

00000e64 <_ZN5Print7printlnEli>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(long num, int base)
 e64:	ef 92       	push	r14
 e66:	ff 92       	push	r15
 e68:	0f 93       	push	r16
 e6a:	1f 93       	push	r17
 e6c:	7c 01       	movw	r14, r24
{
  size_t n = print(num, base);
 e6e:	0e 94 f2 06 	call	0xde4	; 0xde4 <_ZN5Print5printEli>
 e72:	8c 01       	movw	r16, r24
  n += println();
 e74:	c7 01       	movw	r24, r14
 e76:	0e 94 3e 06 	call	0xc7c	; 0xc7c <_ZN5Print7printlnEv>
 e7a:	9c 01       	movw	r18, r24
 e7c:	20 0f       	add	r18, r16
 e7e:	31 1f       	adc	r19, r17
  return n;
}
 e80:	c9 01       	movw	r24, r18
 e82:	1f 91       	pop	r17
 e84:	0f 91       	pop	r16
 e86:	ff 90       	pop	r15
 e88:	ef 90       	pop	r14
 e8a:	08 95       	ret

00000e8c <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
 e8c:	ef 92       	push	r14
 e8e:	ff 92       	push	r15
 e90:	0f 93       	push	r16
 e92:	1f 93       	push	r17
 e94:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 e96:	0e 94 72 06 	call	0xce4	; 0xce4 <_ZN5Print5writeEPKc>
 e9a:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 e9c:	c7 01       	movw	r24, r14
 e9e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <_ZN5Print7printlnEv>
 ea2:	08 0f       	add	r16, r24
 ea4:	19 1f       	adc	r17, r25
  return n;
}
 ea6:	c8 01       	movw	r24, r16
 ea8:	1f 91       	pop	r17
 eaa:	0f 91       	pop	r16
 eac:	ff 90       	pop	r15
 eae:	ef 90       	pop	r14
 eb0:	08 95       	ret

00000eb2 <__mulsi3>:
 eb2:	62 9f       	mul	r22, r18
 eb4:	d0 01       	movw	r26, r0
 eb6:	73 9f       	mul	r23, r19
 eb8:	f0 01       	movw	r30, r0
 eba:	82 9f       	mul	r24, r18
 ebc:	e0 0d       	add	r30, r0
 ebe:	f1 1d       	adc	r31, r1
 ec0:	64 9f       	mul	r22, r20
 ec2:	e0 0d       	add	r30, r0
 ec4:	f1 1d       	adc	r31, r1
 ec6:	92 9f       	mul	r25, r18
 ec8:	f0 0d       	add	r31, r0
 eca:	83 9f       	mul	r24, r19
 ecc:	f0 0d       	add	r31, r0
 ece:	74 9f       	mul	r23, r20
 ed0:	f0 0d       	add	r31, r0
 ed2:	65 9f       	mul	r22, r21
 ed4:	f0 0d       	add	r31, r0
 ed6:	99 27       	eor	r25, r25
 ed8:	72 9f       	mul	r23, r18
 eda:	b0 0d       	add	r27, r0
 edc:	e1 1d       	adc	r30, r1
 ede:	f9 1f       	adc	r31, r25
 ee0:	63 9f       	mul	r22, r19
 ee2:	b0 0d       	add	r27, r0
 ee4:	e1 1d       	adc	r30, r1
 ee6:	f9 1f       	adc	r31, r25
 ee8:	bd 01       	movw	r22, r26
 eea:	cf 01       	movw	r24, r30
 eec:	11 24       	eor	r1, r1
 eee:	08 95       	ret

00000ef0 <__udivmodsi4>:
 ef0:	a1 e2       	ldi	r26, 0x21	; 33
 ef2:	1a 2e       	mov	r1, r26
 ef4:	aa 1b       	sub	r26, r26
 ef6:	bb 1b       	sub	r27, r27
 ef8:	fd 01       	movw	r30, r26
 efa:	0d c0       	rjmp	.+26     	; 0xf16 <__udivmodsi4_ep>

00000efc <__udivmodsi4_loop>:
 efc:	aa 1f       	adc	r26, r26
 efe:	bb 1f       	adc	r27, r27
 f00:	ee 1f       	adc	r30, r30
 f02:	ff 1f       	adc	r31, r31
 f04:	a2 17       	cp	r26, r18
 f06:	b3 07       	cpc	r27, r19
 f08:	e4 07       	cpc	r30, r20
 f0a:	f5 07       	cpc	r31, r21
 f0c:	20 f0       	brcs	.+8      	; 0xf16 <__udivmodsi4_ep>
 f0e:	a2 1b       	sub	r26, r18
 f10:	b3 0b       	sbc	r27, r19
 f12:	e4 0b       	sbc	r30, r20
 f14:	f5 0b       	sbc	r31, r21

00000f16 <__udivmodsi4_ep>:
 f16:	66 1f       	adc	r22, r22
 f18:	77 1f       	adc	r23, r23
 f1a:	88 1f       	adc	r24, r24
 f1c:	99 1f       	adc	r25, r25
 f1e:	1a 94       	dec	r1
 f20:	69 f7       	brne	.-38     	; 0xefc <__udivmodsi4_loop>
 f22:	60 95       	com	r22
 f24:	70 95       	com	r23
 f26:	80 95       	com	r24
 f28:	90 95       	com	r25
 f2a:	9b 01       	movw	r18, r22
 f2c:	ac 01       	movw	r20, r24
 f2e:	bd 01       	movw	r22, r26
 f30:	cf 01       	movw	r24, r30
 f32:	08 95       	ret

00000f34 <__tablejump2__>:
 f34:	ee 0f       	add	r30, r30
 f36:	ff 1f       	adc	r31, r31

00000f38 <__tablejump__>:
 f38:	05 90       	lpm	r0, Z+
 f3a:	f4 91       	lpm	r31, Z+
 f3c:	e0 2d       	mov	r30, r0
 f3e:	09 94       	ijmp

00000f40 <_exit>:
 f40:	f8 94       	cli

00000f42 <__stop_program>:
 f42:	ff cf       	rjmp	.-2      	; 0xf42 <__stop_program>
